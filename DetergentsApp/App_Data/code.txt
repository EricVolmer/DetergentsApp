@(Html.Kendo().Grid(Model)
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(c => c.EAN).Width(150);
        columns.Bound(c => c.Title).Width(150);
        columns.Bound(c => c.productName).Width(200);
        columns.Bound(c => c.productDescription).Width(250);
        columns.Bound(c => c.validFrom).Width(200);

        columns.ForeignKey(c => c.CategoryID, (List<Category>)
            ViewData["categories"], "CategoryID", "CategoryName").Title("Category").Width(200);

        columns.Command(command =>
        {
            command.Edit();
            command.Destroy();
        }).Width(200);
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create();
        toolbar.Search();
    })
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .Pageable()
    .Sortable()
    .Scrollable(scr => scr.Height(430))
    .Events(events =>
    {
        events.Remove("onRemove");
        events.DetailExpand("onDetailExpand");
        events.Edit("onEdit");
    })
    .Events(e => e.Edit("hideProductID"))
    .DataSource(dataSource => dataSource
        .Server()
        .Model(model =>
        {
            model.Id(c => c.ProductID);

            model.Field(c => c.productName);
            model.Field(c => c.productDescription);
            model.Field(c => c.EAN);
            model.Field(c => c.validFrom);
            model.Field(c => c.Category).DefaultValue(new Category {CategoryID = 1, CategoryName = "Water"});
        }
        )
        .Read(read => read.Action("Grid", "Grid"))
        .Create("Products_Create", "Grid")
        .Update("Products_Update", "Grid")
        .Destroy("Products_Destroy", "Grid")
    )
    )


@{
    Html.Kendo().Grid(Model)
        .Name("Category_List")
        .Columns(columns =>
        {
            columns.Bound(c => c.Category.CategoryID);
            columns.Bound(c => c.Category.CategoryName);
        })
        .DetailTemplate(c =>
        {
            Html.Kendo().TabStrip()
                .Name("TabStrip_" + c.CategoryID)
                .SelectedIndex(0)
                .Items(items =>
                {
                    items.Add().Text("Product").Content(@<text>
                                                            @(Html.Kendo().Grid(Model)
                                                                .Name("Products_" + c.CategoryID)
                                                                .Columns(columns =>
                                                                {
                                                                    columns.Bound(p => p.EAN).Width(150);
                                                                    columns.Bound(p => p.Title).Width(150);
                                                                    columns.Bound(p => p.productName).Width(200);
                                                                    columns.Bound(p => p.productDescription).Width(250);
                                                                    columns.Bound(p => p.validFrom).Width(200);
                                                                })
                                                                .Pageable()
                                                                .Sortable()
                                                                )
                                                         </text>);
                    items.Add().Text("Details").Content(
                        @<div class="product-details">
                            <ul>
                                <li>
                                    <label> EAN number</label>@c.EAN
                                </li>
                                <li>
                                    <label> Product Name</label>@c.productName
                                </li>
                                <li>
                                    <label> Product Description</label>@c.productDescription
                                </li>
                            </ul>
                        </div>);
                })
                .Render();
        })
        .RowAction(row =>
        {
            if (row.Index == 0)
            {
                row.DetailRow.Expanded = true;
            }
        })
        
        .Pageable()
        .DataSource(datasource => datasource.Server().PageSize(5))
        .Sortable()
        .Render();
    
}
<script>

    function onRemove(e){
        //Implement the event handler for Remove
    }

    function onDetailExpand(e){
        //Implement the event handler for DetailExpand
    }

    function onEdit(e){
        //Implement the event handler for Edit
    }
     function error_handler(e) {    
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function() {
                            message += this + "\n";
                        });
                    }
                });        
                alert(message);
            }
        }

</script>





