@using DetergentsApp.Models
@model IEnumerable<DetergentsApp.Models.Category>


@helper RenderGrid()
{
    @(Html.Kendo().Grid<DetergentsApp.Models.Product>()
        .Name("filesGrid")
        .ToolBar(t => t.Template(
            @<text>
                @(Html.Kendo().Upload()
                    .Name("files")
                    .Async(a => a.Save("Save", "Grid"))
                    .ShowFileList(true) // Hide the file list as we're displaying uploaded files in the Grid
                    )
             </text>
            ))
        .Columns(columns => 
        {
            columns.Bound(f => f.productName).ClientTemplate("<a href='Home/Download?id=#= Id #'>#= Name #</a>").Title("File name");
                                              
                                              
            columns.Command(command => command.Destroy()).Width(100);
        })
        .Sortable()
        .Pageable()
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(10)
            .Model(m => m.Id(f => f.ProductID))
            .Read(read => read.Action("FilesRead", "Grid"))
            .Destroy(update => update.Action("FilesDestroy", "Grid"))
        )
        )
    
}

@{ Html.Kendo().Grid(Model)
    .Name("Categories")
    .Columns(columns =>
    {
        columns.Bound(e => e.CategoryID).Width(140).Visible(false);
        columns.Bound(e => e.CategoryName).Width(140);
        
    })
       
    .DetailTemplate(e =>
    {            
            Html.Kendo().TabStrip()
                    .Name("TabStrip_" + e.CategoryID)
                    .SelectedIndex(0)
                    .Items(items =>
                    {
                        items.Add().Text("Articles").Content(@<text>
                                
                                @(Html.Kendo().Grid(e.Products)
                                        .Name("Articles_" + e.CategoryID)
                                        .Columns(columns =>
                                        {
                                            columns.Select().Width(75).HtmlAttributes(new { @class="checkbox-align"}).HeaderHtmlAttributes(new { @class = "checkbox-align" }).Width(20);
                                            columns.Bound(c => c.ProductID).Visible(false);

                                            columns.Bound(o => o.Title).Width(101);
                                            columns.Bound(o => o.productName).Width(140);
                                            columns.Bound(o => o.productDescription).Width(200);
                                            columns.Bound(o => o.EAN).Width(200);
                                            columns.Bound(o => o.Category.CategoryName).Format("{0:d}");
                                            columns.ForeignKey(c => c.Category.CategoryName, (List<Category>)
                                                     @ViewBag.Category , "CategoryID", "CategoryName").Title("Category").Width(150);
                                            columns.Command(command => { command.Edit();}).Width(180);

                                        })
                                        .Pageable()
                                        .Sortable()
                                    .ToolBar(toolbar => {
                                                            toolbar.Create();
                                    })
                                    .Editable(editable => editable.Mode(GridEditMode.PopUp))

                                    .DataSource(dataSource => dataSource
                                        .Server()
                                        .PageSize(5)
                                        .Model(model =>
                                        {
                                            model.Id(p => p.ProductID);
                                            model.Field(p => p.ProductID).Editable(false);
                                        })
                                        .Create(create => create.Action("Products_Create", "Grid"))
                                        .Update(update => update.Action("Products_Update", "Grid"))
                                    
                                    ))
                                
                                
                        </text>);
                        items.Add().Text("List of files uploaded").Content(                                
                            @<div class="file-details">       
                                <text>
                                          @RenderGrid()
                                       </text>
                                    
                            </div>);                                                       

                    })
                
                    .Render();
        
    })
    .RowAction(row =>
    {
        if (row.Index == 0)
        {
            row.DetailRow.Expanded = true;
        }
    })
          
    .Pageable()
       .ToolBar(toolbar => {
                               toolbar.Create();
       })
       .Editable(editable => editable.Mode(GridEditMode.PopUp))

       
    .DataSource(dataSource => dataSource
        .Server()
        .PageSize(5)
        .Model(model =>
        {
            model.Id(p => p.Products);
        })
     //   .Read(read => read.Action("Products_Read", "Grid"))
        .Create(create => create.Action("Category_Create", "Grid"))
        .Update(update => update.Action("Products_Update", "Grid"))
    //    .Destroy(destroy => destroy.Action("Products_Destroy", "Grid"))

    )
    .Sortable()
    .Render();
}




<style>
	    .file-details ul
        {
            list-style:none;
            font-style:italic;
            margin-bottom: 20px;
        }

        .file-details label
        {
            display:inline-block;
            width:90px;
            font-style:normal;
            font-weight:bold;
        }
    </style>




