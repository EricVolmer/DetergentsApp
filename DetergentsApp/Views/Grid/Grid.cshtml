@using DetergentsApp.Models
@model IEnumerable<DetergentsApp.Models.Category>


@helper RenderGrid()
{
    @(Html.Kendo().Grid<UserFileViewModel>()
        .Name("filesGrid")
        .ToolBar(t => t.Template(
            @<text>
                @(Html.Kendo().Upload()
                    .Name("files")
                    .Async(a => a.Save("Save", "Grid"))
                    .Events(e => e.Success("onUploadSuccess"))
                    .ShowFileList(false) // Hide the file list as we're displaying uploaded files in the Grid
                    )
             </text>
            ))
        .Columns(columns =>
        {
            columns.Bound(f => f.Name).ClientTemplate("<a href='Home/Download?id=#= Id #'>#= Name #</a>").Title("File name");

            // Calculate the file size in KB, round it up and display it in a client template
            columns.Bound(f => f.DataLength).ClientTemplate("#= Math.ceil(DataLength / 1024) #").Title("File size in KB").Width(150);

            columns.Command(command => command.Destroy()).Width(100);
        })
        .Sortable()
        .Pageable()
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(10)
            .Model(m => m.Id(f => f.Id))
            .Read(read => read.Action("FilesRead", "Grid"))
            .Destroy(update => update.Action("FilesDestroy", "Grid"))
        )
        )
}

@{
    Html.Kendo().Grid(Model)
        .Name("Categories")
        .Columns(columns =>
        {
            columns.Bound(e => e.categoryID).Width(140).Visible(false);
            columns.Bound(e => e.categoryName).Width(140);
        })
        .DetailTemplate(e =>
        {
            Html.Kendo().TabStrip()
                .Name("TabStrip_" + e.categoryID)
                .SelectedIndex(0)
                .Items(items =>
                {
                    items.Add().Text("Articles").Content(@<text>

                                                             @(Html.Kendo().Grid(e.Products)
                                                                 .Name("Articles_" + e.categoryID)
                                                                 .Columns(columns =>
                                                                 {
                                                                     columns.Select().Width(75).HtmlAttributes(new {@class = "checkbox-align"}).HeaderHtmlAttributes(new {@class = "checkbox-align"}).Width(20);
                                                                     columns.Bound(c => c.productID).Visible(false);

                                                                     columns.Bound(o => o.title).Width(101);
                                                                     columns.Bound(o => o.productName).Width(140);
                                                                     columns.Bound(o => o.productDescription).Width(200);
                                                                     columns.Bound(o => o.EAN).Width(200);
                                                                     columns.Bound(o => o.Category.categoryName).Format("{0:d}");
                                                                     columns.ForeignKey(c => c.Category.categoryName, (List<Category>)
                                                                         ViewBag.Category, "CategoryID", "CategoryName").Title("Category").Width(150);
                                                                     columns.Command(command => { command.Edit(); }).Width(180);
                                                                 })
                                                                 .Pageable()
                                                                 .Sortable()
                                                                 .ToolBar(toolbar => { toolbar.Create(); })
                                                                 .Editable(editable => editable.Mode(GridEditMode.PopUp))
                                                                 .DataSource(dataSource => dataSource
                                                                     .Server()
                                                                     .PageSize(5)
                                                                     .Model(model =>
                                                                     {
                                                                         model.Id(p => p.productID);
                                                                         model.Field(p => p.productID).Editable(false);
                                                                     })
                                                                     .Create(create => create.Action("Products_Create", "Grid"))
                                                                     .Update(update => update.Action("Products_Update", "Grid"))
                                                                 ))


                                                          </text>);
                    items.Add().Text("List of files uploaded").Content(
                        @<div class="file-details">
                            <text>
                                @RenderGrid()
                            </text>

                        </div>);
                })
                .Render();
        })
        .RowAction(row =>
        {
            if (row.Index == 0)
            {
                row.DetailRow.Expanded = true;
            }
        })
        .Pageable()
        .ToolBar(toolbar => { toolbar.Create(); })
        .Editable(editable => editable.Mode(GridEditMode.PopUp))
        .DataSource(dataSource => dataSource
            .Server()
            .PageSize(5)
            .Model(model => { model.Id(p => p.Products); })
            //   .Read(read => read.Action("Products_Read", "Grid"))
            .Create(create => create.Action("Category_Create", "Grid"))
            .Update(update => update.Action("Products_Update", "Grid"))
        //    .Destroy(destroy => destroy.Action("Products_Destroy", "Grid"))
        )
        .Sortable()
        .Render();
}

<script type="text/javascript">
    function onUploadSuccess() {
        // Force the rebinding of the Grid on successful upload
        $("#filesGrid").data("kendoGrid").dataSource.read();
    }
</script>

<style>
	    .file-details ul
        {
            list-style:none;
            font-style:italic;
            margin-bottom: 20px;
        }

        .file-details label
        {
            display:inline-block;
            width:90px;
            font-style:normal;
            font-weight:bold;
        }
    </style>